{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { db } from \"./SQLite\";\nexport function criaTabela() {\n  db.transaction(function (transaction) {\n    transaction.executeSql(\"CREATE TABLE IF NOT EXISTS \" + \"Notas \" + \"(id INTEGER PRIMARY KEY AUTOINCREMENT, titulo TEXT, categoria TEXT, texto TEXT);\");\n  });\n}\nexport function adicionaNota(nota) {\n  return _regeneratorRuntime.async(function adicionaNota$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve) {\n            db.transaction(function (transaction) {\n              transaction.executeSql(\"INSERT INTO Notas (titulo, categoria, texto) VALUES (?, ?, ?);\", [nota.titulo, nota.categoria, nota.texto], function () {\n                resolve(\"Nota adicionada com sucesso!\");\n              });\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function atualizaNota(nota) {\n  return _regeneratorRuntime.async(function atualizaNota$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", new Promise(function (resolve) {\n            db.transaction(function (transaction) {\n              transaction.executeSql(\"UPDATE Notas SET titulo = ?, categoria = ?, texto = ? WHERE id = ?;\", [nota.titulo, nota.categoria, nota.texto, nota.id], function () {\n                resolve(\"Nota atualizada com sucesso!\");\n              });\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function removeNota(nota) {\n  return _regeneratorRuntime.async(function removeNota$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", new Promise(function (resolve) {\n            db.transaction(function (transaction) {\n              transaction.executeSql(\"DELETE FROM Notas WHERE id = ?;\", [nota.id], function () {\n                resolve(\"Nota removida com sucesso!\");\n              });\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function buscaNotas() {\n  return _regeneratorRuntime.async(function buscaNotas$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", new Promise(function (resolve) {\n            db.transaction(function (transaction) {\n              transaction.executeSql(\"SELECT * FROM Notas;\", [], function (transaction, resultado) {\n                resolve(resultado.rows._array);\n              });\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function buscaNotasByCategoria(categoria) {\n  return _regeneratorRuntime.async(function buscaNotasByCategoria$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          return _context5.abrupt(\"return\", new Promise(function (resolve) {\n            db.transaction(function (transaction) {\n              transaction.executeSql(\"SELECT * FROM Notas WHERE categoria = ?;\", [categoria], function (transaction, resultado) {\n                resolve(resultado.rows._array);\n              });\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["db","criaTabela","transaction","executeSql","adicionaNota","nota","Promise","resolve","titulo","categoria","texto","atualizaNota","id","removeNota","buscaNotas","resultado","rows","_array","buscaNotasByCategoria"],"sources":["/Users/marcioneibizerra/Documents/Cursos/ReactNative/salvandoLocalmente/src/servicos/Notas.js"],"sourcesContent":["import { db } from \"./SQLite\"\n\nexport function criaTabela() {\n  db.transaction((transaction) => {\n    transaction.executeSql(\"CREATE TABLE IF NOT EXISTS \" +\n      \"Notas \" +\n      \"(id INTEGER PRIMARY KEY AUTOINCREMENT, titulo TEXT, categoria TEXT, texto TEXT);\")\n  })\n}\nexport async function adicionaNota(nota) {\n  return new Promise((resolve) => {\n    db.transaction((transaction) => {\n      transaction.executeSql(\"INSERT INTO Notas (titulo, categoria, texto) VALUES (?, ?, ?);\", [nota.titulo, nota.categoria, nota.texto], () => {\n        resolve(\"Nota adicionada com sucesso!\")\n      })\n    })\n  })\n}\nexport async function atualizaNota(nota) {\n  return new Promise((resolve) => {\n    db.transaction((transaction) => {\n      transaction.executeSql(\"UPDATE Notas SET titulo = ?, categoria = ?, texto = ? WHERE id = ?;\", [nota.titulo, nota.categoria, nota.texto, nota.id], () => {\n        resolve(\"Nota atualizada com sucesso!\")\n      })\n    })\n  })\n}\nexport async function removeNota(nota) {\n  return new Promise((resolve) => {\n    db.transaction((transaction) => {\n      transaction.executeSql(\"DELETE FROM Notas WHERE id = ?;\", [nota.id], () => {\n        resolve(\"Nota removida com sucesso!\")\n      })\n    })\n  })\n}\nexport async function buscaNotas() {\n  return new Promise((resolve) => {\n    db.transaction((transaction) => {\n      transaction.executeSql(\"SELECT * FROM Notas;\", [], (transaction, resultado) => {\n        resolve(resultado.rows._array)\n      })\n    })\n  })\n}\n\nexport async function buscaNotasByCategoria(categoria) {\n  return new Promise((resolve) => {\n    db.transaction((transaction) => {\n      transaction.executeSql(\"SELECT * FROM Notas WHERE categoria = ?;\", [categoria], (transaction, resultado) => {\n        resolve(resultado.rows._array)\n      })\n    })\n  })\n}"],"mappings":";AAAA,SAASA,EAAT;AAEA,OAAO,SAASC,UAAT,GAAsB;EAC3BD,EAAE,CAACE,WAAH,CAAe,UAACA,WAAD,EAAiB;IAC9BA,WAAW,CAACC,UAAZ,CAAuB,gCACrB,QADqB,GAErB,kFAFF;EAGD,CAJD;AAKD;AACD,OAAO,SAAeC,YAAf,CAA4BC,IAA5B;EAAA;IAAA;MAAA;QAAA;UAAA,iCACE,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;YAC9BP,EAAE,CAACE,WAAH,CAAe,UAACA,WAAD,EAAiB;cAC9BA,WAAW,CAACC,UAAZ,CAAuB,gEAAvB,EAAyF,CAACE,IAAI,CAACG,MAAN,EAAcH,IAAI,CAACI,SAAnB,EAA8BJ,IAAI,CAACK,KAAnC,CAAzF,EAAoI,YAAM;gBACxIH,OAAO,CAAC,8BAAD,CAAP;cACD,CAFD;YAGD,CAJD;UAKD,CANM,CADF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AASP,OAAO,SAAeI,YAAf,CAA4BN,IAA5B;EAAA;IAAA;MAAA;QAAA;UAAA,kCACE,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;YAC9BP,EAAE,CAACE,WAAH,CAAe,UAACA,WAAD,EAAiB;cAC9BA,WAAW,CAACC,UAAZ,CAAuB,qEAAvB,EAA8F,CAACE,IAAI,CAACG,MAAN,EAAcH,IAAI,CAACI,SAAnB,EAA8BJ,IAAI,CAACK,KAAnC,EAA0CL,IAAI,CAACO,EAA/C,CAA9F,EAAkJ,YAAM;gBACtJL,OAAO,CAAC,8BAAD,CAAP;cACD,CAFD;YAGD,CAJD;UAKD,CANM,CADF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AASP,OAAO,SAAeM,UAAf,CAA0BR,IAA1B;EAAA;IAAA;MAAA;QAAA;UAAA,kCACE,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;YAC9BP,EAAE,CAACE,WAAH,CAAe,UAACA,WAAD,EAAiB;cAC9BA,WAAW,CAACC,UAAZ,CAAuB,iCAAvB,EAA0D,CAACE,IAAI,CAACO,EAAN,CAA1D,EAAqE,YAAM;gBACzEL,OAAO,CAAC,4BAAD,CAAP;cACD,CAFD;YAGD,CAJD;UAKD,CANM,CADF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AASP,OAAO,SAAeO,UAAf;EAAA;IAAA;MAAA;QAAA;UAAA,kCACE,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAa;YAC9BP,EAAE,CAACE,WAAH,CAAe,UAACA,WAAD,EAAiB;cAC9BA,WAAW,CAACC,UAAZ,CAAuB,sBAAvB,EAA+C,EAA/C,EAAmD,UAACD,WAAD,EAAca,SAAd,EAA4B;gBAC7ER,OAAO,CAACQ,SAAS,CAACC,IAAV,CAAeC,MAAhB,CAAP;cACD,CAFD;YAGD,CAJD;UAKD,CANM,CADF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAUP,OAAO,SAAeC,qBAAf,CAAqCT,SAArC;EAAA;IAAA;MAAA;QAAA;UAAA,kCACE,IAAIH,OAAJ,CAAY,UAACC,OAAD,EAAa;YAC9BP,EAAE,CAACE,WAAH,CAAe,UAACA,WAAD,EAAiB;cAC9BA,WAAW,CAACC,UAAZ,CAAuB,0CAAvB,EAAmE,CAACM,SAAD,CAAnE,EAAgF,UAACP,WAAD,EAAca,SAAd,EAA4B;gBAC1GR,OAAO,CAACQ,SAAS,CAACC,IAAV,CAAeC,MAAhB,CAAP;cACD,CAFD;YAGD,CAJD;UAKD,CANM,CADF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}